name: Release

on:
  push:
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+"

permissions:
  contents: write

jobs:
  create-release:
    name: create-release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ env.VERSION }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
      - name: Get release version from the tag
        run: echo "VERSION=${{ github.ref_name }}" >> $GITHUB_ENV
      - name: Create GitHub release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh release create $VERSION --draft --verify-tag --title $VERSION

  build-release:
    name: build-release
    needs: ["create-release"]
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - build: x86_64-linux
            os: ubuntu-latest
            rust: stable
            target: x86_64-unknown-linux-gnu
          - build: aarch64-linux
            os: ubuntu-22.04-arm
            rust: stable
            target: aarch64-unknown-linux-gnu
          - build: x86_64-macos
            os: macos-latest
            rust: stable
            target: x86_64-apple-darwin
          - build: aarch64-macos
            os: macos-latest
            rust: stable
            target: aarch64-apple-darwin
          - build: x86_64-windows
            os: windows-latest
            rust: stable
            target: x86_64-pc-windows-msvc
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}
          target: ${{ matrix.target }}
      - name: Build release binary
        shell: bash
        run: |
          cargo build --release --target ${{ matrix.target }}
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            bin="target/${{ matrix.target }}/release/grint.exe"
          else
            bin="target/${{ matrix.target }}/release/grint"
          fi
          echo "BIN=$bin" >> $GITHUB_ENV
      - name: Determine archive name
        shell: bash
        run: |
          version="${{ needs.create-release.outputs.version }}"
          echo "ARCHIVE=grint-$version-${{ matrix.target }}" >> $GITHUB_ENV
      - name: Create archive directory
        shell: bash
        run: |
          mkdir -p "$ARCHIVE"
          cp "$BIN" "$ARCHIVE"/
          cp {README.md,LICENSE,CHANGELOG.md} "$ARCHIVE"/
      - name: Build archive (Windows)
        shell: bash
        if: matrix.os == 'windows-latest'
        run: |
          7z a "$ARCHIVE.zip" "$ARCHIVE"
          echo "ASSET=$ARCHIVE.zip" >> $GITHUB_ENV
      - name: Build archive (Unix)
        shell: bash
        if: matrix.os != 'windows-latest'
        run: |
          tar czf "$ARCHIVE.tar.gz" "$ARCHIVE"
          echo "ASSET=$ARCHIVE.tar.gz" >> $GITHUB_ENV
      - name: Upload release archive
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          version="${{ needs.create-release.outputs.version }}"
          gh release upload "$version" "$ASSET"
